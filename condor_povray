#!/bin/python3 

##
# @file    condor_povray
# @desc    Main driver of application
# @author  John Ed Quinn (jquinn13)
##

# Imports

import sys
import os
import glob
import random
import string
import pathlib
import shutil

# Globals

FRAMES_PER_SEC = 10
PRESERVE_WORKSPACE = False

# Functions

def usage(exit_code=0):
	print('''Usage: {} IN_FILE OUT_FILE NFRAMES XSIZE YSIZE
		- IN_FILE   input file (.pov)
		- OUT_FILE  output file (.mpg)
		- NFRAMES   number of frames (at 10 frames/sec)
		- XSIZE     resolution (x)
		- YSIZE     resolution (y)'''.format(os.path.basename(sys.argv[0])))
	sys.exit(exit_code)

def generate_submit_file(ident, base_dir, submit_file, in_file, nframes, log_file):
	# Determine Workspace
	workspace = f'{base_dir}/{ident}'

	# Open File to Write
	f = open(f'{workspace}/{submit_file}', 'w')

	# Common Variables
	f.write(f'''
	universe = vanilla
	executable = /afs/crc.nd.edu/group/ccl/software/x86_64/redhat7/povray/3.7/bin/povray
	output = {workspace}/$(PROCESS).output
	error = {workspace}/$(PROCESS).error
	transfer_input_files = {base_dir}/{in_file}
	should_transfer_files = yes
	when_to_transfer_output = on_exit
	log = {base_dir}/{log_file}
	''')

	# Write Remaps
	f.write('transfer_output_remaps = "')
	f.write(f'_condor_stdout = {workspace}/_condor_stdout; _condor_stderr = {workspace}/_condor_stderr;')
	for i in range(nframes):
		f.write(f'frame{i:03d}.png = {workspace}/frame{i:03d}.png;')
	f.write('"\n')

	# Write Arguments
	f.write('queue arguments from (\n')
	for i in range(nframes):
		inc_str = ''
		if i != nframes - 1:
			inc = i / nframes
			inc_str = f'{inc:.3f}'[1:]
		else:
			inc_str = '1'
		f.write(f'\t+I{in_file} +Oframe{i:03d}.png +K{inc_str}\n')
	f.write(')\n');

	# Close File
	f.close()

# Main Driver
if __name__ == '__main__':

	# Check Args Length
	if len(sys.argv) != 6:
		usage(1)

	# Find Current Working Directory
	BASE_DIR = os.path.abspath(sys.argv[0] + '/..')

	# Create Workspace
	IDENTIFIER = ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))
	WORKSPACE = f'{BASE_DIR}/{IDENTIFIER}'
	os.mkdir(WORKSPACE)

	# Grab Arguments
	IN_FILE  = sys.argv[1]
	OUT_FILE = sys.argv[2]
	NFRAMES  = int(sys.argv[3])
	XSIZE    = int(sys.argv[4])
	YSIZE    = int(sys.argv[5])
	LOG_FILE = f'movie{XSIZE}.log'
	SUBMIT_FILE = f'{IDENTIFIER}.submit'

	# Generate Condor Submit File for Each Job
	generate_submit_file(IDENTIFIER, BASE_DIR, SUBMIT_FILE, IN_FILE, NFRAMES, LOG_FILE)

	# Call condor_submit as needed
	os.system(f'condor_submit {WORKSPACE}/{SUBMIT_FILE}')

	# Wait for jobs to finish
	os.system(f'condor_wait {LOG_FILE}')
	print(f'File Created: {LOG_FILE}')

	# Join files together into movie (.mpg)
	os.system(f'ffmpeg -loglevel error -nostdin -r {FRAMES_PER_SEC} -i {WORKSPACE}/frame%03d.png -r ntsc {OUT_FILE}')
	print(f'File Created: {OUT_FILE}')

	# Delete Files
	if not PRESERVE_WORKSPACE:
		shutil.rmtree(WORKSPACE)
	
